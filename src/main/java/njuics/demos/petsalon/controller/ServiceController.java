package njuics.demos.petsalon.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import njuics.demos.petsalon.model.Service;
import njuics.demos.petsalon.repository.ServiceRepository;
import njuics.demos.petsalon.resource.ServiceResource;

@RestController
@RequestMapping(path="/service") // This means URL's start with /service
public class ServiceController {
	@Autowired // This means to get the bean called repository
               // Which is auto-generated by Spring, we will use it to handle the data
	private ServiceRepository repository;

	@PostMapping(path="")
	public @ResponseBody String addNewService (@RequestBody Service service) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		repository.save(service);
		return "New Service Saved";
	}
	
	@GetMapping(path="")
	public @ResponseBody 
	List<ServiceResource> getAllService() {
		// 先将 repository.findAll() 从 Iterable<> 转换为 List<>
		Iterable<Service> serviceIt = repository.findAll();
		List<Service> serviceLs = new ArrayList<>();
		serviceIt.forEach(i -> { serviceLs.add(i); });
		
		List<ServiceResource> service = serviceLs.stream().map(
				serv -> new ServiceResource(serv)
				).collect(Collectors.toList());
		
		return service;
	}
	
	@GetMapping("/{id}")
	public @ResponseBody 
	ServiceResource getOneService(@PathVariable Integer id) {
		Service service = repository.findById(id)
				.orElseThrow(() -> new RuntimeException());

		return new ServiceResource(service);
	}
	
	@PutMapping("/{id}")
	public Service replaceService(@RequestBody Service newService, @PathVariable Integer id) {
		
		return repository.findById(id)
			.map(service -> {
				service.setDate(newService.getDate());
				service.setFee(newService.getFee());
				service.setCategory(newService.getCategory());
				return repository.save(service);
			})
			.orElseGet(() -> {
				newService.setId(id);
				return repository.save(newService);
			});
	}

	@DeleteMapping("/{id}")
	public @ResponseBody String deleteService(@PathVariable Integer id) {
		repository.deleteById(id);
		return "Deleted";
	}
}
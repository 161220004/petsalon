package njuics.demos.petsalon.controller;

import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;
import static org.springframework.hateoas.mvc.ControllerLinkBuilder.methodOn;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.hateoas.Resource;
import org.springframework.hateoas.Resources;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseBody;

import njuics.demos.petsalon.model.Pet;
import njuics.demos.petsalon.repository.PetRepository;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/pets") // This means URL's start with /pets
public class PetController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private PetRepository repository;

	@PostMapping(path="")
	public @ResponseBody String addNewPet (@RequestBody Pet pet) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		repository.save(pet);
		return "New Pet Saved";
	}
	
	@GetMapping(path="")
	public @ResponseBody 
	Resources<Resource<Pet>> getAllPets() {
		// 先将 repository.findAll() 从 Iterable<> 转换为 List<>
		Iterable<Pet> petsIt = repository.findAll();
		List<Pet> petsLs = new ArrayList<>();
		petsIt.forEach(i -> { petsLs.add(i); });
		
		List<Resource<Pet>> pets = petsLs.stream().map(
				pet -> new Resource<>(pet, 
						linkTo(methodOn(PetController.class).getOnePet(pet.getId())).withSelfRel(),
						linkTo(methodOn(PetController.class).getAllPets()).withRel("pets")
						)
				).collect(Collectors.toList());
		
		return new Resources<>(pets, linkTo(methodOn(PetController.class).getAllPets()).withSelfRel());
	}

	@GetMapping("/{id}")
	public @ResponseBody 
	Resource<Pet> getOnePet(@PathVariable Integer id) {
		Pet pet = repository.findById(id)
				.orElseThrow(() -> new RuntimeException());

		return new Resource<>(pet,
			linkTo(methodOn(PetController.class).getOnePet(id)).withSelfRel(),
			linkTo(methodOn(PetController.class).getAllPets()).withRel("pets"));
	}
	
	@PutMapping("/{id}")
	public Pet replacePet(@RequestBody Pet newPet, @PathVariable Integer id) {
		
		return repository.findById(id)
			.map(pet -> {
				pet.setName(newPet.getName());
				pet.setType(newPet.getType());
				return repository.save(pet);
			})
			.orElseGet(() -> {
				newPet.setId(id);
				return repository.save(newPet);
			});
	}

	@DeleteMapping("/{id}")
	public @ResponseBody String deletePet(@PathVariable Integer id) {
		repository.deleteById(id);
		return "Deleted";
	}
}
